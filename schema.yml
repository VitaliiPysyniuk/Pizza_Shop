openapi: 3.0.3
info:
  title: PizzaShop API
  version: 1.0.0
  description: Documentation for PizzaShop API.
paths:
  /auth:
    post:
      operationId: auth_create
      description: Takes a set of user credentials and returns an access and refresh
        JSON web token pair to prove the authentication of those credentials.
      summary: Obtains access and refresh JSON web token pair.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /auth/refresh:
    post:
      operationId: auth_refresh_create
      description: Takes a refresh type JSON web token and returns an access type
        JSON web token if the refresh token is valid.
      summary: Refresh expired user access JSON web token.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /auth/register:
    post:
      operationId: auth_register_create
      description: Create a new inactive user profile from user data. When creating
        a user, an activation link comes to his e-mail.
      summary: Registers new user.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegister'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRegister'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRegister'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRegister'
          description: ''
  /pizza:
    get:
      operationId: pizza_list
      description: ''
      tags:
      - pizza
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pizza'
          description: ''
  /pizza/create:
    post:
      operationId: pizza_create_create
      description: ''
      tags:
      - pizza
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pizza'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Pizza'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Pizza'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pizza'
          description: ''
  /pizza/{pizza_id}:
    get:
      operationId: pizza_retrieve
      description: ''
      parameters:
      - in: path
        name: pizza_id
        schema:
          type: integer
        required: true
      tags:
      - pizza
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pizza'
          description: ''
    patch:
      operationId: pizza_partial_update
      description: ''
      parameters:
      - in: path
        name: pizza_id
        schema:
          type: integer
        required: true
      tags:
      - pizza
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedPizza'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedPizza'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedPizza'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pizza'
          description: ''
    delete:
      operationId: pizza_destroy
      description: ''
      parameters:
      - in: path
        name: pizza_id
        schema:
          type: integer
        required: true
      tags:
      - pizza
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /pizza/{pizza_id}/sizes:
    post:
      operationId: pizza_sizes_create
      description: ''
      parameters:
      - in: path
        name: pizza_id
        schema:
          type: integer
        required: true
      tags:
      - pizza
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PizzaSize'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PizzaSize'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PizzaSize'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PizzaSize'
          description: ''
  /pizza/{pizza_id}/sizes/{pizza_size_id}:
    get:
      operationId: pizza_sizes_retrieve
      description: ''
      parameters:
      - in: path
        name: pizza_id
        schema:
          type: integer
        required: true
      - in: path
        name: pizza_size_id
        schema:
          type: integer
        required: true
      tags:
      - pizza
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PizzaSize'
          description: ''
    patch:
      operationId: pizza_sizes_partial_update
      description: ''
      parameters:
      - in: path
        name: pizza_id
        schema:
          type: integer
        required: true
      - in: path
        name: pizza_size_id
        schema:
          type: integer
        required: true
      tags:
      - pizza
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedPizzaSize'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedPizzaSize'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedPizzaSize'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PizzaSize'
          description: ''
    delete:
      operationId: pizza_sizes_destroy
      description: ''
      parameters:
      - in: path
        name: pizza_id
        schema:
          type: integer
        required: true
      - in: path
        name: pizza_size_id
        schema:
          type: integer
        required: true
      tags:
      - pizza
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /order:
    get:
      operationId: order_list
      description: ''
      tags:
      - order
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
          description: ''
  /order/create:
    post:
      operationId: order_create_create
      description: ''
      tags:
      - order
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Order'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: ''
  /order/{order_id}:
    get:
      operationId: order_retrieve
      description: ''
      parameters:
      - in: path
        name: order_id
        schema:
          type: integer
        required: true
      tags:
      - order
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: ''
    patch:
      operationId: order_partial_update
      description: ''
      parameters:
      - in: path
        name: order_id
        schema:
          type: integer
        required: true
      tags:
      - order
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedOrder'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedOrder'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedOrder'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: ''
  /order/{order_id}/pizzas/{item_id}:
    get:
      operationId: order_pizzas_retrieve
      description: Get information about ordered pizza from the order. Order is selected
        by a set parameter order_id. The pizza is selected by a set parameter pk.
        The information contains the id of the pizza size and the number of ordered
        pizzas.
      summary: Get information about an ordered item from the order.
      parameters:
      - in: path
        name: item_id
        schema:
          type: integer
        description: The id of the specific item of the order.
        required: true
      - in: path
        name: order_id
        schema:
          type: integer
        description: The id of the specific order.
        required: true
      tags:
      - order
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderPizzaSize'
          description: ''
    patch:
      operationId: order_pizzas_partial_update
      description: Updates information about ordered pizza from the order. Order is
        selected by a set parameter order_id. The pizza is selected by a set parameter
        pk. The information contains the id of the pizza size and the number of ordered
        pizzas only this information can updated.
      summary: Updates information about an ordered item from the order.
      parameters:
      - in: path
        name: item_id
        schema:
          type: integer
        description: The id of the specific item of the order.
        required: true
      - in: path
        name: order_id
        schema:
          type: integer
        description: The id of the specific order.
        required: true
      tags:
      - order
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedOrderPizzaSize'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedOrderPizzaSize'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedOrderPizzaSize'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderPizzaSize'
          description: ''
    delete:
      operationId: order_pizzas_destroy
      description: Delete ordered pizza from the order. Order is selected by a set
        parameter order_id. The pizza is selected by a set parameter pk.
      summary: Delete ordered item from the order.
      parameters:
      - in: path
        name: item_id
        schema:
          type: integer
        description: The id of the specific item of the order.
        required: true
      - in: path
        name: order_id
        schema:
          type: integer
        description: The id of the specific order.
        required: true
      tags:
      - order
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /order/statistic:
    get:
      operationId: order_statistic_retrieve
      description: Get statistic data about selected orders. Selection can be specified
        by the setting of query parameters, also the result data can be grouped by
        the setting of the specific query parameter.
      summary: Get statistics about orders.
      parameters:
      - in: query
        name: date_from
        schema:
          type: string
        description: The date from which orders are selected.
        examples:
          DateToExample:
            value: '2021-09-19'
            summary: date_to example
      - in: query
        name: date_to
        schema:
          type: string
        description: The date from which orders are selected.
        examples:
          DateFromExample:
            value: '2021-09-21'
            summary: date_from example
      - in: query
        name: group
        schema:
          type: string
        description: 'Parameter for grouping result can involve a few items: title
          - for groupingby the name of the pizza, size - for grouping by the size
          of pizza, courier -for grouping by the courier, week_day - for grouping
          by the day of the week, month - for grouping by the month.'
        examples:
          GroupExample1:
            value: title,size,courier,week_day,month
            summary: group example 1
          GroupExample2:
            value: title,size,courier,month
            summary: group example 2
          GroupExample3:
            value: title,courier
            summary: group example 3
      - in: query
        name: hour_from
        schema:
          type: integer
        description: The hour from which orders are selected.
        examples:
          HourFromExample:
            value: '11'
            summary: hour_from example
      - in: query
        name: hour_to
        schema:
          type: integer
        description: The hour to which orders are selected.
        examples:
          HourToExample:
            value: '18'
            summary: hour_to example
      - in: query
        name: month
        schema:
          type: integer
        description: The number of month k for selecting orders for that month.
        examples:
          SeptemberExample:
            value: '9'
            summary: September example
          DecemberExample:
            value: '12'
            summary: December example
      - in: query
        name: week_day
        schema:
          type: integer
        description: The day of the week for selecting orders for that day.
        examples:
          SundayExample:
            value: '1'
            summary: Sunday example
          FridayExample:
            value: '6'
            summary: Friday example
      tags:
      - order
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /user:
    get:
      operationId: user_list
      description: ''
      tags:
      - user
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
          description: ''
    post:
      operationId: user_create
      description: ''
      tags:
      - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /user/{user_id}:
    get:
      operationId: user_retrieve
      description: ''
      parameters:
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - user
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    patch:
      operationId: user_partial_update
      description: ''
      parameters:
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUser'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /user/favorites:
    get:
      operationId: user_favorites_list
      description: ''
      tags:
      - user
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserFavorites'
          description: ''
  /user/{user_id}/favorites:
    get:
      operationId: user_favorites_list_2
      description: ''
      parameters:
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - user
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserFavorites'
          description: ''
    post:
      operationId: user_favorites_create
      description: ''
      parameters:
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserFavorites'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserFavorites'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserFavorites'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserFavorites'
          description: ''
  /user/{user_id}/favorites/{favorite_id}:
    delete:
      operationId: user_favorites_destroy
      description: ''
      parameters:
      - in: path
        name: favorite_id
        schema:
          type: integer
        required: true
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - user
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /user/sorted_deliveries:
    get:
      operationId: user_sorted_deliveries_retrieve
      description: ''
      tags:
      - user
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: integer
          readOnly: true
        courier:
          type: integer
          nullable: true
        status:
          type: string
          maxLength: 24
        creation_time:
          type: string
          format: date-time
          readOnly: true
        confirmation_time:
          type: string
          format: date-time
          readOnly: true
        delivery_start_time:
          type: string
          format: date-time
          readOnly: true
        delivery_time:
          type: string
          format: time
        delivery_address:
          type: string
          maxLength: 100
        payment_method:
          type: string
          maxLength: 4
        comment:
          type: string
          maxLength: 200
        total:
          type: integer
          readOnly: true
        pizzas:
          type: array
          items:
            $ref: '#/components/schemas/OrderPizzaSize'
      required:
      - comment
      - confirmation_time
      - creation_time
      - delivery_address
      - delivery_start_time
      - id
      - payment_method
      - pizzas
      - total
      - user
    OrderPizzaSize:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        order:
          type: integer
          readOnly: true
        pizza_size:
          type: integer
        number_of_pizza:
          type: integer
          maximum: 32767
          minimum: -32768
      required:
      - id
      - number_of_pizza
      - order
      - pizza_size
    PatchedOrder:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: integer
          readOnly: true
        courier:
          type: integer
          nullable: true
        status:
          type: string
          maxLength: 24
        creation_time:
          type: string
          format: date-time
          readOnly: true
        confirmation_time:
          type: string
          format: date-time
          readOnly: true
        delivery_start_time:
          type: string
          format: date-time
          readOnly: true
        delivery_time:
          type: string
          format: time
        delivery_address:
          type: string
          maxLength: 100
        payment_method:
          type: string
          maxLength: 4
        comment:
          type: string
          maxLength: 200
        total:
          type: integer
          readOnly: true
        pizzas:
          type: array
          items:
            $ref: '#/components/schemas/OrderPizzaSize'
    PatchedOrderPizzaSize:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        order:
          type: integer
          readOnly: true
        pizza_size:
          type: integer
        number_of_pizza:
          type: integer
          maximum: 32767
          minimum: -32768
    PatchedPizza:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 30
        ingredients:
          type: string
          maxLength: 200
        image:
          type: string
          format: uri
        sizes:
          type: array
          items:
            $ref: '#/components/schemas/PizzaSize'
    PatchedPizzaSize:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        diameter:
          type: string
          maxLength: 5
        weight:
          type: integer
          maximum: 32767
          minimum: -32768
        price:
          type: integer
          maximum: 32767
          minimum: -32768
        pizza:
          type: integer
          readOnly: true
    PatchedUser:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        email:
          type: string
          format: email
          maxLength: 254
        password:
          type: string
          maxLength: 200
        first_name:
          type: string
          maxLength: 30
        last_name:
          type: string
          maxLength: 30
        phone_number:
          type: string
          maxLength: 14
        role:
          type: string
          maxLength: 7
        is_active:
          type: boolean
    Pizza:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 30
        ingredients:
          type: string
          maxLength: 200
        image:
          type: string
          format: uri
        sizes:
          type: array
          items:
            $ref: '#/components/schemas/PizzaSize'
      required:
      - id
      - ingredients
      - title
    PizzaSize:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        diameter:
          type: string
          maxLength: 5
        weight:
          type: integer
          maximum: 32767
          minimum: -32768
        price:
          type: integer
          maximum: 32767
          minimum: -32768
        pizza:
          type: integer
          readOnly: true
      required:
      - diameter
      - id
      - pizza
      - price
      - weight
    TokenObtainPair:
      type: object
      properties:
        email:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - email
      - password
      - refresh
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
      required:
      - access
      - refresh
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        email:
          type: string
          format: email
          maxLength: 254
        password:
          type: string
          maxLength: 200
        first_name:
          type: string
          maxLength: 30
        last_name:
          type: string
          maxLength: 30
        phone_number:
          type: string
          maxLength: 14
        role:
          type: string
          maxLength: 7
        is_active:
          type: boolean
      required:
      - email
      - first_name
      - id
      - last_name
      - password
      - phone_number
    UserFavorites:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: integer
        pizza_size:
          type: integer
      required:
      - id
      - pizza_size
    UserRegister:
      type: object
      properties:
        email:
          type: string
          format: email
          maxLength: 254
        password:
          type: string
          writeOnly: true
          maxLength: 200
        first_name:
          type: string
          maxLength: 30
        last_name:
          type: string
          maxLength: 30
        phone_number:
          type: string
          maxLength: 14
        creation_time:
          type: string
          format: date-time
          readOnly: true
      required:
      - creation_time
      - email
      - first_name
      - last_name
      - password
      - phone_number
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
